-- Basic Aggregate Functions:
-- Que 1) Retrieve the total number of rentals made in the Sakila database? Hint: Use the COUNT() function.
use mavenmovies;
select count(rental_id) AS total_no_of_rentals from rental;
-- Output ;- 16044

-- Que 2) Find the average rental duration (in days) of movies rented from the Sakila database? Hint: Utilize the AVG() function.
SELECT AVG(DATEDIFF(return_date, rental_date)) AS average_duration_in_days from rental;
-- Output;- Average_duration_in_days - 5.0252

-- String Functions:
-- Que 3) Display the first name and last name of customers in uppercase? Hint: Use the UPPER () function.
SELECT UPPER(first_name) AS upper_first_name, UPPER(last_name) AS upper_last_name from customer;

-- Que 4)Extract the month from the rental date and display it alongside the rental ID? Hint: Employ the MONTH() function.
SELECT rental_id, MONTH(rental_date) AS rental_month from rental;

-- GROUP BY:
-- Que 5) Retrieve the count of rentals for each customer (display customer ID and the count of rentals)?
-- Hint: Use COUNT () in conjunction with GROUP BY.
SELECT c.customer_id, COUNT(r.rental_id) AS rental_count from customer c
LEFT JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id;

-- Que 6) Find the total revenue generated by each store? Hint: Combine SUM() and GROUP BY.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store s
JOIN staff st ON s.store_id = st.store_id
JOIN payment p ON st.staff_id = p.staff_id
GROUP BY s.store_id;

-- Joins
-- Que 7) Display the title of the movie, customers first name, and last name who rented it ?
-- Hint: Use JOIN between the film, inventory, rental, and customer tables.
SELECT f.title AS movie_title, c.first_name, c.last_name from film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN customer c ON r.customer_id = c.customer_id;

-- Que 8) Retrieve the names of all actors who have appeared in the film "Gone trouble" ?
-- Hint: Use JOIN between the film actor, film, and actor tables.
use mavenmovies;
select * from film;
SELECT actor.first_name, actor.last_name from actor
join film_actor ON actor.actor_id = film_actor.actor_id
join film ON film.film_id = film_actor.film_id
where film.title = "Gone trouble";

-- GROUP BY:
-- Que 9) Determine the total number of rentals for each category of movies.
-- Hint: JOIN film_category, film, and rental tables, then use COUNT () and GROUP BY.
SELECT fc.category_id, COUNT(r.rental_id) AS rental_count from rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
GROUP BY fc.category_id;

-- Que 10) Find the average rental rate of movies in each language.
-- Hint: JOIN film and language tables, then use AVG () and GROUP BY.
SELECT l.name AS language, AVG(f.rental_rate) AS avg_rental_rate FROM film f
JOIN language l ON f.language_id = l.language_id
GROUP BY l.name;

SELECT * FROM language;
SELECT l.name AS language, AVG(f.rental_rate) AS avg_rental_rate FROM film f
JOIN language l ON f.language_id = l.language_id
GROUP BY l.name;

SELECT l.name AS language, AVG(f.rental_rate) AS avg_rental_rate FROM film f
RIGHT JOIN (
    SELECT language_id, AVG(rental_rate) AS avg_rate
    FROM film
    GROUP BY language_id
) AS avg_table ON f.language_id = avg_table.language_id
JOIN language l ON f.language_id = l.language_id
GROUP BY l.name;

-- Joins
-- Que.11) Retrieve the customer names along with the total amount they've spent on rentals.
-- Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.
use mavenmovies;
SELECT c.first_name, c.last_name, SUM(p.amount) AS total_amount_spent FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id;

-- Que 12) List the titles of movies rented by each customer in a particular city (e.g., 'London').
-- Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.
SELECT c.first_name, c.last_name, f.title AS rented_movie_title FROM customer c
JOIN address a ON c.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE ci.city = 'London'
ORDER BY c.first_name, c.last_name, f.title;

-- Advanced Joins and GROUP BY:
-- Que 13) Display the top 5 rented movies along with the number of times they've been rented.
-- Hint: JOIN film, inventory, and rental tables, then use COUNT() and GROUP BY, and limit the results.
SELECT f.title AS movie_title, COUNT(*) AS rental_count FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title ORDER BY rental_count DESC LIMIT 5;

-- Que 14)Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
-- Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.
SELECT c.customer_id, c.first_name, c.last_name FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
WHERE s.store_id IN (1, 2)
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING COUNT(DISTINCT s.store_id) = 2;